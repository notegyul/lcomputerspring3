[1] @Component : 클래스를 스프링의 빈으로 등록하기 위해 사용(빈은 스프링 컨테이너에 의해 생성,관리되는 객체)
	컴포트 주석을 사용해 클래스를 빈으로 등록하면 스프링은 해당 클래스의 인스턴스를 생성하고 컨테이너에 등록.
	해당 클래스의 인스턴스를 필요로 하는 곳에 주입할 수 있다. 누가? 스프링이.
	->객체 간 의존성 주입을 쉽게 처리하고 객체의 생명주기와 관리를 스프링 컨테이너에게 위임 가능.
	@Component 주석은 일반적인 목적의 빈을 등록할 때 사용되며, 
	특정한 종류의 빈을 등록하기 위해서는 해당하는 세부 주석들을 사용.
	@Controller, @Service, @Repository는 @Component의 특화된 형태로 
	각각 컨트롤러, 서비스, 리포지토리 빈을 등록하기 위해 사용.
	component scan(스프링이 자동으로 클래스를 검색하여 빈으로 등록하는 기능을 제공)과 함께 사용 시 유용.
	@Component 주석을 사용하여 클래스를 등록 + 컴포넌트 스캔을 활성화하면 
	개발자는 별도의 XML 또는 Java 설정 파일에 빈을 등록 안 해도 됨. 스프링이 자동으로 빈을 검색하고 등록해 줌.
	
[2] @Mapper
	: 인터페이스를 마이바티스 매퍼로 지정함으로써, 해당 인터페이스를 통해 데이터베이스와의 상호작용을 수행.
	@Mapper 주석을 인터페이스에 적용하면, 마이바티스는 해당 인터페이스의 구현체를 동적으로 생성.
	이 구현체는 실제로 SQL 쿼리를 실행하고, 데이터베이스와의 통신을 처리. 
	개발자는 @Mapper 주석이 적용된 인터페이스를 사용하여 SQL 쿼리를 호출하고, 결과를 반환받을 수 있음.
	스캐너는 설정 파일에서 지정한 패키지를 스캔하고, @Mapper 주석이 적용된 인터페이스를 발견하면 자동으로 구현체를 생성하여 스프링 컨테이너에 등록
	@Mapper 주석을 사용하여 인터페이스를 마이바티스 매퍼로 지정하면, 개발자는 간단한 인터페이스 메서드를 사용하여 데이터베이스 조작을 수행
	->SQL 쿼리를 직접 작성하거나 JDBC 코드를 다루는 복잡함을 줄일 수 있음.
	
[3]	@Configuration
	: @Configuration 주석이 적용된 클래스는 스프링의 설정 파일로 인식되며, 스프링 컨테이너에 의해 관리되는 빈(Bean)을 정의하는 역할
	@Configuration 주석을 사용하는 클래스는 XML 기반의 설정 파일을 대체 가능
	스프링 컨테이너는 @Configuration 주석이 적용된 클래스를 스캔하고, 해당 클래스의 빈 메서드들을 실행하여 빈 객체를 생성하고 관리
	해당 주석 사용하여 설정 클래스 작성하면 개발자는 자바 코드로 애플리케이션 설정 구성 가능
	 -> 컴파일 타임의 오류 검출, 자동 완성 및 리팩토링 같은 개발 도구의 지원을 받을 수 있어 개발 효율성 증대
	필수적으로 쓰임.
	스프링 컨테이너가 알아서 빈을 생성하고 의존성을 주입하는 등의 작업을 처리할 수 있도록 하기 위해 @Configuration 주석을 사용하여 설정 클래스를 정의
	
	
[4]	스프링에서 MyBatis를 사용하는 이유는 여러 가지가 있습니다.

	-간편성과 유연성: MyBatis는 Java 객체를 SQL 문에 매핑하는 간단하고 유연한 방법을 제공합니다. SQL 쿼리를 작성하고 결과 집합을 Java 객체에 매핑할 수 있는 기능을 제공합니다. 이를 통해 개발자는 직접 SQL 쿼리를 작성하고 매핑을 설정함으로써 원하는 데이터 액세스 로직을 쉽게 작성할 수 있습니다.

	-선언적 매핑: MyBatis는 XML 파일이나 애노테이션을 사용하여 SQL 문과 Java 객체 간의 매핑을 선언적으로 정의할 수 있습니다. 이를 통해 개발자는 별도의 SQL 문을 작성하거나 JDBC 코드를 작성할 필요 없이, 간단한 설정을 통해 매핑을 수행할 수 있습니다.

	-동적 쿼리 처리: MyBatis는 동적 쿼리 처리를 위한 강력한 기능을 제공합니다. 동적 쿼리란 실행 시에 쿼리 조건이나 결과에 따라 쿼리가 동적으로 변경되는 것을 의미합니다. MyBatis는 동적 SQL 태그를 사용하여 동적 쿼리를 작성할 수 있으며, 이를 통해 조건에 따라 다른 쿼리를 실행하거나 조건에 따라 쿼리에 동적으로 파라미터를 추가할 수 있습니다.

	-트랜잭션 관리: 스프링은 트랜잭션 관리를 위한 기능을 제공하는데, MyBatis와 함께 사용하면 스프링의 트랜잭션 관리 기능을 활용할 수 있습니다. 스프링의 트랜잭션 관리 기능을 사용하면 데이터베이스 트랜잭션을 안전하게 처리할 수 있고, 예외 발생 시 롤백을 수행할 수 있습니다.

	-잘 정리된 SQL 코드: MyBatis를 사용하면 SQL 코드가 잘 정리되어 있어 유지보수와 디버깅이 용이합니다. SQL 코드를 XML 파일로 분리하고 필요에 따라 쿼리를 모듈화할 수 있으며, 복잡한 쿼리도 간결하게 작성할 수 있습니다.

	이러한 이유로 MyBatis는 스프링과 함께 사용되며, 데이터 액세스 로직을 구현하고 관리하는 데 많은 도움을 줍니다.



	