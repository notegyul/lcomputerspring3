EntityController 클래스:

@RestController: 해당 클래스를 REST 컨트롤러로 선언합니다.
@RequestMapping("/entities"): /entities 경로로 들어오는 모든 요청을 이 컨트롤러가 처리합니다.
@GetMapping("/{pageNumber}"): /{pageNumber} 경로로 들어오는 GET 요청을 getEntitiesByPage 메서드가 처리합니다. {pageNumber}은 PathVariable로 동적으로 페이지 번호 값을 받아옵니다.
getEntitiesByPage 메서드: 페이지 번호를 받아와서 해당 페이지의 엔티티를 가져오는 로직을 구현합니다. @PathVariable 어노테이션을 사용하여 URL에서 페이지 번호 값을 추출합니다. 그리고 Pageable 객체를 생성하여 페이지 번호와 페이지 크기를 설정합니다. 마지막으로 entityService.getEntitiesWithPagination(pageable)를 호출하여 해당 페이지의 데이터를 가져옵니다.
EntityService 클래스:

PagingAndSortingRepository를 사용하여 페이지네이션을 구현합니다.
getEntitiesWithPagination 메서드: Pageable 객체를 매개변수로 받아서 findAll(pageable) 메서드를 호출하여 해당 페이지의 엔티티를 가져옵니다.
위의 코드 예시에서는 /entities/{pageNumber} 경로로 GET 요청이 들어올 때, /{pageNumber} 부분의 값을 페이지 번호로 사용하여 해당 페이지의 데이터를 가져오는 방식으로 동작합니다. 예를 들어, /entities/0로 요청하면 첫 번째 페이지의 데이터를 반환하고, /entities/1로 요청하면 두 번째 페이지의 데이터를 반환하게 됩니다.

이렇게 Spring에서 페이징과 PathVariable을 함께 사용하여 동적인 페이지 번호를 처리할 수 있습니다. 사용자는 URL에서 페이지 번호를 변경하여 원하는 페이지의 데이터를 가져올 수 있습니다.


//optional stream -> if else 대체
	//query에서 limit 변경
	//매개변수로 (Model model ,@PathVariable("pageOpt") Optional<Integer> pageOpt)
	





